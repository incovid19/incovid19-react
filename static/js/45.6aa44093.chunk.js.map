{"version":3,"sources":["components/MapLegend.js","components/MapVisualizer.js"],"names":["MapLegend","data","statistic","mapViz","mapScale","t","useTranslation","svgLegendRef","useRef","svgLegendChoroRef","useMeasure","wrapperRef","width","useEffect","transition","duration","D3_TRANSITION_DURATION","MAP_VIZS","CHOROPLETH","svg","select","current","attr","selectAll","remove","text","BUBBLE","SPIKES","call","g","spike","statisticConfig","STATISTIC_CONFIGS","zoom","MAP_DIMENSIONS","domain","domainMax","legend","legendRadius","map","d","join","color","yScale","copy","range","axisRight","tickSize","tickPadding","tickValues","tickFormat","num","formatNumber","format","style","SPIKE","ticks","slice","reverse","gap","enter","append","i","xScale","length","axisBottom","x","title","height","marginTop","marginRight","marginBottom","marginLeft","ordinalWeights","tickAdjust","interpolate","n","Math","min","rangeRound","quantize","ramp","toDataURL","interpolator","Object","assign","interpolateRound","undefined","round","quantile","invertExtent","thresholds","quantiles","thresholdFormat","scaleLinear","widthScale","reduce","a","b","xPos","w","acc","scaleOrdinal","scaleBand","filter","max","bandwidth","on","node","MAP_LEGEND_HEIGHT","mapConfig","colorScale","Number","isInteger","className","ref","id","preserveAspectRatio","viewBox","position","canvas","context","getContext","fillStyle","fillRect","MapVisualizer","mapCode","isDistrictView","regionHighlighted","setRegionHighlighted","getMapStatistic","transformStatistic","noDistrictData","svgRef","mapMeta","MAP_META","history","useHistory","useSWR","geoDataFile","file","json","suspense","revalidateOnFocus","geoData","statisticTotal","useMemo","strokeColor","useCallback","alpha","features","mapType","MAP_TYPES","COUNTRY","feature","objects","states","districts","district","properties","state","st_nm","obj","districtsSet","stateCodes","stateCode","STATE_CODES","Set","add","statisticMax","keys","includes","districtData","res","districtName","has","UNKNOWN_DISTRICT_KEY","push","scaleSqrt","clamp","nice","scaleSequential","interpolateReds","interpolateBlues","interpolateGreens","interpolateGreys","interpolatePurples","interpolateOranges","category","interpolatePiYG","colorInterpolator","fillColor","stateData","populateTexts","regionSelection","nonLinear","toTitleCase","onceTouchedRegion","path","geoPath","geoIdentity","T","event","update","exit","stopPropagation","STATE","window","innerWidth","sel","bind","sortedFeatures","value","sort","featureA","featureB","centroid","requestIdleCallback","meshStates","meshDistricts","mesh","stateName","STATE_NAMES","each","highlighted","this","parentNode","appendChild","classnames","zone","hasPrimary","colorInterpolationFilters","type","values"],"mappings":"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","file":"static/js/45.6aa44093.chunk.js","sourcesContent":["import {\r\n  D3_TRANSITION_DURATION,\r\n  MAP_DIMENSIONS,\r\n  MAP_LEGEND_HEIGHT,\r\n  MAP_VIZS,\r\n  STATISTIC_CONFIGS,\r\n} from '../constants';\r\nimport {formatNumber, spike} from '../utils/commonFunctions';\r\n\r\nimport {range, quantile} from 'd3-array';\r\nimport {axisRight, axisBottom} from 'd3-axis';\r\nimport {format} from 'd3-format';\r\nimport {interpolate, interpolateRound, quantize} from 'd3-interpolate';\r\nimport {scaleLinear, scaleOrdinal, scaleBand} from 'd3-scale';\r\nimport {select} from 'd3-selection';\r\nimport {transition} from 'd3-transition';\r\nimport {useEffect, useRef} from 'react';\r\nimport {useTranslation} from 'react-i18next';\r\nimport {useMeasure} from 'react-use';\r\n\r\nfunction MapLegend({data, statistic, mapViz, mapScale}) {\r\n  const {t} = useTranslation();\r\n  const svgLegendRef = useRef(null);\r\n  const svgLegendChoroRef = useRef(null);\r\n  const [wrapperRef, {width}] = useMeasure();\r\n\r\n  useEffect(() => {\r\n    const t = transition().duration(D3_TRANSITION_DURATION);\r\n\r\n    if (mapViz !== MAP_VIZS.CHOROPLETH) {\r\n      const svg = select(svgLegendChoroRef.current);\r\n      svg\r\n        .select('.ramp')\r\n        .transition(t)\r\n        .attr('opacity', 0)\r\n        .attr('display', 'none')\r\n        .attr('xlink:href', null);\r\n\r\n      svg\r\n        .select('.bars')\r\n        .selectAll('rect')\r\n        .transition(t)\r\n        .attr('opacity', 0)\r\n        .remove();\r\n      svg.selectAll('.axis > *:not(.axistext)').remove();\r\n      svg.select('.axistext').text('');\r\n    }\r\n\r\n    if (mapViz !== MAP_VIZS.BUBBLE) {\r\n      const svg = select(svgLegendRef.current);\r\n      svg\r\n        .select('.circles')\r\n        .selectAll('circle')\r\n        .transition(t)\r\n        .attr('r', 0)\r\n        .attr('cy', 0)\r\n        .remove();\r\n      svg.selectAll('.circle-axis > *').remove();\r\n    }\r\n\r\n    if (mapViz !== MAP_VIZS.SPIKES) {\r\n      const svg = select(svgLegendRef.current);\r\n      svg\r\n        .select('.spikes')\r\n        .call((g) =>\r\n          g.selectAll('path').transition(t).attr('d', spike(0)).remove()\r\n        )\r\n        .call((g) => g.selectAll('text').remove())\r\n        .transition(t)\r\n        .selectAll('g')\r\n        .remove();\r\n      svg.selectAll('.spike-axis > *').remove();\r\n    }\r\n  }, [mapViz]);\r\n\r\n  useEffect(() => {\r\n    if (!width) return;\r\n\r\n    const statisticConfig = STATISTIC_CONFIGS[statistic];\r\n    const zoom = width / MAP_DIMENSIONS[0];\r\n\r\n    if (mapViz === MAP_VIZS.BUBBLE) {\r\n      const svg = select(svgLegendRef.current);\r\n\r\n      const [, domainMax] = mapScale.domain();\r\n\r\n      const legend = svg\r\n        .select('.circles')\r\n        .attr('transform', `translate(48,40)`)\r\n        .attr('text-anchor', 'middle');\r\n\r\n      const legendRadius = [0.1, 0.4, 1].map((d) => d * domainMax);\r\n\r\n      legend\r\n        .selectAll('circle')\r\n        .data(legendRadius)\r\n        .join('circle')\r\n        .attr('fill', 'none')\r\n        .attr('stroke', statisticConfig.color + '70')\r\n        .transition(t)\r\n        .attr('cy', (d) => -mapScale(d))\r\n        .attr('r', (d) => mapScale(d));\r\n\r\n      const yScale = mapScale.copy().range([0, -2 * mapScale(domainMax)]);\r\n\r\n      svg\r\n        .select('.circle-axis')\r\n        .attr('transform', `translate(48,50)`)\r\n        .transition(t)\r\n        .call(\r\n          axisRight(yScale)\r\n            .tickSize(0)\r\n            .tickPadding(0)\r\n            .tickValues(legendRadius)\r\n            .tickFormat((num) =>\r\n              formatNumber(\r\n                num,\r\n                statisticConfig.format === 'long'\r\n                  ? 'short'\r\n                  : statisticConfig.format\r\n              )\r\n            )\r\n        )\r\n        .selectAll('.tick text')\r\n        .style('text-anchor', 'middle')\r\n        .attr('font-size', 10 / zoom);\r\n\r\n      svg.select('.circle-axis').call((g) => g.select('.domain').remove());\r\n    } else if (mapViz === MAP_VIZS.SPIKE) {\r\n      const svg = select(svgLegendRef.current);\r\n      const ticks = mapScale.ticks(3).slice(1).reverse();\r\n\r\n      const gap = 28 / zoom;\r\n\r\n      svg\r\n        .select('.spikes')\r\n        .attr('transform', `translate(32,24)`)\r\n        .selectAll('g')\r\n        .data(ticks)\r\n        .join((enter) =>\r\n          enter.append('g').call((g) =>\r\n            g\r\n              .append('path')\r\n              .attr('fill-opacity', 0.3)\r\n              .attr('d', (d) => spike(0))\r\n          )\r\n        )\r\n        .attr('transform', (d, i) => `translate(${i * gap},0)`)\r\n        .call((g) =>\r\n          g\r\n            .select('path')\r\n            .transition(t)\r\n            .attr('d', (d) => spike(mapScale(d)))\r\n            .attr('fill', statisticConfig.color + '70')\r\n            .attr('stroke', statisticConfig.color + '70')\r\n        );\r\n\r\n      const xScale = mapScale.copy().range([gap * ticks.length, 0]);\r\n      svg\r\n        .select('.spike-axis')\r\n        .attr('transform', `translate(32,32)`)\r\n        .transition(t)\r\n        .call(\r\n          axisBottom(xScale)\r\n            .tickSize(0)\r\n            .tickPadding(0)\r\n            .tickValues(ticks)\r\n            .tickFormat((num) =>\r\n              formatNumber(\r\n                num,\r\n                statisticConfig.format === 'long'\r\n                  ? 'short'\r\n                  : statisticConfig.format\r\n              )\r\n            )\r\n        )\r\n        .selectAll('.tick text')\r\n        .style('text-anchor', 'middle')\r\n        .attr('font-size', 10 / zoom);\r\n\r\n      svg.select('.spike-axis').call((g) => g.select('.domain').remove());\r\n    } else {\r\n      const svg = select(svgLegendChoroRef.current);\r\n      svg.call(() =>\r\n        legend({\r\n          svg: svg,\r\n          color: mapScale,\r\n          width: width,\r\n          height: MAP_LEGEND_HEIGHT,\r\n          ticks: 5,\r\n          tickFormat: function (d, i, n) {\r\n            if (statisticConfig?.mapConfig?.colorScale) {\r\n              return d;\r\n            } else if (mapViz === MAP_VIZS.CHOROPLETH && !Number.isInteger(d)) {\r\n              return '';\r\n            } else if (i === n.length - 1) {\r\n              return formatNumber(d, statisticConfig.format) + '+';\r\n            } else {\r\n              return formatNumber(d, statisticConfig.format);\r\n            }\r\n          },\r\n          marginLeft: 2,\r\n          marginRight: 0,\r\n        })\r\n      );\r\n      svg.attr('class', statisticConfig?.mapConfig?.colorScale ? 'zone' : '');\r\n    }\r\n  }, [t, width, statistic, mapScale, mapViz]);\r\n\r\n  return (\r\n    <div\r\n      className=\"svg-parent maplegend\"\r\n      ref={wrapperRef}\r\n      style={{height: 2 * MAP_LEGEND_HEIGHT}}\r\n    >\r\n      <svg\r\n        id=\"legend\"\r\n        preserveAspectRatio=\"xMinYMid meet\"\r\n        ref={svgLegendRef}\r\n        viewBox={`0 0 ${MAP_DIMENSIONS[0]} ${MAP_LEGEND_HEIGHT}`}\r\n      >\r\n        <g className=\"circles\"></g>\r\n        <g className=\"spikes\"></g>\r\n        <g className=\"circle-axis\"></g>\r\n        <g className=\"spike-axis\"></g>\r\n        <g className=\"axis\">\r\n          <text className=\"axistext\" />\r\n        </g>\r\n      </svg>\r\n      <svg\r\n        id=\"legend-choro\"\r\n        preserveAspectRatio=\"xMinYMid meet\"\r\n        ref={svgLegendChoroRef}\r\n      >\r\n        <image className=\"ramp\" preserveAspectRatio=\"none\" />\r\n        <g className=\"bars\"></g>\r\n        <g className=\"axis\">\r\n          <text className=\"axistext\" />\r\n        </g>\r\n      </svg>\r\n      <canvas\r\n        className=\"color-scale\"\r\n        style={{position: 'absolute', height: 0}}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MapLegend;\r\n\r\nfunction legend({\r\n  svg,\r\n  color,\r\n  title,\r\n  tickSize = 6,\r\n  width = 320,\r\n  height = 44 + tickSize,\r\n  marginTop = 18,\r\n  marginRight = 0,\r\n  marginBottom = 16 + tickSize,\r\n  marginLeft = 0,\r\n  ticks = width / 64,\r\n  tickFormat,\r\n  tickValues,\r\n  ordinalWeights,\r\n} = {}) {\r\n  const t = svg.transition().duration(D3_TRANSITION_DURATION);\r\n\r\n  let tickAdjust = (g) => {\r\n    const ticks = g.selectAll('.tick line');\r\n    ticks.attr('y1', marginTop + marginBottom - height);\r\n    // select(ticks.nodes()[ticks.size() - 1]).remove();\r\n  };\r\n  let x;\r\n\r\n  // Continuous\r\n  if (color.interpolate) {\r\n    const n = Math.min(color.domain().length, color.range().length);\r\n\r\n    x = color\r\n      .copy()\r\n      .rangeRound(quantize(interpolate(marginLeft, width - marginRight), n));\r\n\r\n    svg\r\n      .select('.ramp')\r\n      .attr('x', marginLeft)\r\n      .attr('y', marginTop)\r\n      .attr('width', width - marginLeft - marginRight)\r\n      .attr('height', height - marginTop - marginBottom)\r\n      .attr(\r\n        'xlink:href',\r\n        ramp(color.copy().domain(quantize(interpolate(0, 1), n))).toDataURL()\r\n      );\r\n  }\r\n\r\n  // Sequential\r\n  else if (color.interpolator) {\r\n    svg\r\n      .select('.bars')\r\n      .selectAll('rect')\r\n      .transition(t)\r\n      .attr('opacity', 0)\r\n      .remove();\r\n\r\n    x = Object.assign(\r\n      color\r\n        .copy()\r\n        .interpolator(interpolateRound(marginLeft, width - marginRight)),\r\n      {\r\n        range() {\r\n          return [marginLeft, width - marginRight];\r\n        },\r\n      }\r\n    );\r\n\r\n    svg\r\n      .select('.ramp')\r\n      .attr('x', marginLeft)\r\n      .attr('y', marginTop)\r\n      .attr('width', width - marginLeft - marginRight)\r\n      .attr('height', height - marginTop - marginBottom)\r\n      .attr('xlink:href', ramp(color.interpolator()).toDataURL())\r\n      .attr('display', 'visible')\r\n      .transition(t)\r\n      .attr('opacity', 1);\r\n\r\n    // scaleSequentialQuantile doesn’t implement ticks or tickFormat.\r\n    if (!x.ticks) {\r\n      if (tickValues === undefined) {\r\n        const n = Math.round(ticks + 1);\r\n        tickValues = range(n).map((i) => quantile(color.domain(), i / (n - 1)));\r\n      }\r\n      if (typeof tickFormat !== 'function') {\r\n        tickFormat = format(tickFormat === undefined ? ',f' : tickFormat);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Threshold\r\n  else if (color.invertExtent) {\r\n    const thresholds = color.thresholds\r\n      ? color.thresholds() // scaleQuantize\r\n      : color.quantiles\r\n      ? color.quantiles() // scaleQuantile\r\n      : color.domain(); // scaleThreshold\r\n\r\n    const thresholdFormat =\r\n      tickFormat === undefined\r\n        ? (d) => d\r\n        : typeof tickFormat === 'string'\r\n        ? format(tickFormat)\r\n        : tickFormat;\r\n\r\n    x = scaleLinear()\r\n      .domain([-1, color.range().length - 1])\r\n      .rangeRound([marginLeft, width - marginRight]);\r\n\r\n    svg\r\n      .append('g')\r\n      .selectAll('rect')\r\n      .data(color.range())\r\n      .join('rect')\r\n      .attr('x', (d, i) => x(i - 1))\r\n      .attr('y', marginTop)\r\n      .attr('width', (d, i) => x(i) - x(i - 1))\r\n      .attr('height', height - marginTop - marginBottom)\r\n      .attr('fill', (d) => d);\r\n\r\n    tickValues = range(-1, thresholds.length);\r\n    tickFormat = (i) => {\r\n      if (i === -1) return thresholdFormat(1);\r\n      else if (i === thresholds.length - 1) return;\r\n      else if (i === thresholds.length - 2)\r\n        return thresholdFormat(thresholds[i] + '+', i);\r\n      return thresholdFormat(thresholds[i], i);\r\n    };\r\n  }\r\n\r\n  // Ordinal\r\n  else {\r\n    svg\r\n      .select('.ramp')\r\n      .transition(t)\r\n      .attr('opacity', 0)\r\n      .attr('xlink:href', null);\r\n    if (!ordinalWeights) {\r\n      x = scaleBand()\r\n        .domain(color.domain().filter((d) => d))\r\n        .rangeRound([marginLeft, width - marginRight]);\r\n      svg\r\n        .select('.bars')\r\n        .selectAll('rect')\r\n        .data(color.domain().filter((d) => d))\r\n        .join('rect')\r\n        .attr('x', x)\r\n        .attr('y', marginTop)\r\n        .attr('width', Math.max(0, x.bandwidth() - 1))\r\n        .attr('height', height - marginTop - marginBottom)\r\n        .attr('fill', color);\r\n    } else {\r\n      const widthScale = scaleLinear()\r\n        .domain([0, ordinalWeights.reduce((a, b) => a + b)])\r\n        .rangeRound([0, width - marginLeft - marginRight]);\r\n\r\n      const xPos = ordinalWeights.map((w, i) =>\r\n        ordinalWeights\r\n          .slice(0, i)\r\n          .reduce((acc, w) => acc + widthScale(w), marginLeft)\r\n      );\r\n\r\n      x = scaleOrdinal().domain(color.domain()).range(xPos);\r\n\r\n      svg\r\n        .select('.bars')\r\n        .selectAll('rect')\r\n        .data(color.domain())\r\n        .join((enter) =>\r\n          enter\r\n            .append('rect')\r\n            .attr('x', x)\r\n            .attr('width', (d, i) => widthScale(ordinalWeights[i]))\r\n        )\r\n        .attr('y', marginTop)\r\n        .attr('height', height - marginTop - marginBottom)\r\n        .attr('fill', color)\r\n        .transition(t)\r\n        .attr('x', x)\r\n        .attr('width', (d, i) => widthScale(ordinalWeights[i]))\r\n        .attr('opacity', 1);\r\n    }\r\n\r\n    tickAdjust = () => {};\r\n  }\r\n\r\n  svg\r\n    .select('.axis')\r\n    .attr('transform', `translate(0,${height - marginBottom})`)\r\n    .transition(t)\r\n    .attr('class', 'axis')\r\n    .call(\r\n      axisBottom(x)\r\n        .ticks(ticks, typeof tickFormat === 'string' ? tickFormat : undefined)\r\n        .tickFormat(typeof tickFormat === 'function' ? tickFormat : undefined)\r\n        .tickSize(tickSize)\r\n        .tickValues(tickValues)\r\n    )\r\n    .on('start', () => {\r\n      svg.call(tickAdjust).call((svg) => svg.select('.domain').remove());\r\n    })\r\n    .call((g) =>\r\n      g\r\n        .select('.axistext')\r\n        .attr('class', 'axistext')\r\n        .attr('x', marginLeft)\r\n        .attr('y', marginTop + marginBottom - height - 6)\r\n        .attr('fill', 'currentColor')\r\n        .attr('text-anchor', 'start')\r\n        .attr('font-weight', 'bold')\r\n        .text(title)\r\n    );\r\n\r\n  return svg.node();\r\n}\r\n\r\nfunction ramp(color, n = 256) {\r\n  const canvas = select('.color-scale').node();\r\n  const context = ((canvas.width = n), (canvas.height = 1), canvas).getContext(\r\n    '2d'\r\n  );\r\n  for (let i = 0; i < n; ++i) {\r\n    context.fillStyle = color(i / (n - 1));\r\n    context.fillRect(i, 0, 1, 1);\r\n  }\r\n  return canvas;\r\n}\r\n","import MapLegend from './MapLegend';\r\n\r\nimport {\r\n  D3_TRANSITION_DURATION,\r\n  MAP_DIMENSIONS,\r\n  MAP_META,\r\n  MAP_TYPES,\r\n  MAP_VIZS,\r\n  STATE_CODES,\r\n  STATE_NAMES,\r\n  STATISTIC_CONFIGS,\r\n  UNKNOWN_DISTRICT_KEY,\r\n} from '../constants';\r\nimport {formatNumber, spike, toTitleCase} from '../utils/commonFunctions';\r\n\r\nimport {AlertIcon} from '@primer/octicons-react';\r\nimport classnames from 'classnames';\r\nimport {max} from 'd3-array';\r\nimport {json} from 'd3-fetch';\r\nimport {geoIdentity, geoPath} from 'd3-geo';\r\nimport {scaleLinear, scaleSqrt, scaleSequential} from 'd3-scale';\r\nimport {\r\n  interpolateReds,\r\n  interpolateBlues,\r\n  interpolateGreens,\r\n  interpolateGreys,\r\n  interpolatePurples,\r\n  interpolateOranges,\r\n  interpolatePiYG,\r\n} from 'd3-scale-chromatic';\r\nimport {select} from 'd3-selection';\r\nimport {transition} from 'd3-transition';\r\nimport {useCallback, useEffect, useMemo, useRef} from 'react';\r\nimport {useTranslation} from 'react-i18next';\r\nimport {useHistory} from 'react-router-dom';\r\nimport useSWR from 'swr';\r\nimport {feature, mesh} from 'topojson-client';\r\n\r\nconst colorInterpolator = (statistic) => {\r\n  if (statistic === 'confirmed') {\r\n    return (t) => interpolateReds(t * 0.85);\r\n  } else if (statistic === 'active') {\r\n    return (t) => interpolateBlues(t * 0.85);\r\n  } else if (statistic === 'recovered') {\r\n    return (t) => interpolateGreens(t * 0.85);\r\n  } else if (statistic === 'deceased') {\r\n    return (t) => interpolateGreys(t * 0.85);\r\n  } else if (statistic === 'tested') {\r\n    return (t) => interpolatePurples(t * 0.85);\r\n  } else if (\r\n    statistic === 'tpr' ||\r\n    statistic === 'cfr' ||\r\n    statistic === 'other'\r\n  ) {\r\n    return (t) => interpolateOranges(t * 0.85);\r\n  } else if (STATISTIC_CONFIGS[statistic]?.category === 'vaccinated') {\r\n    return (t) => interpolatePiYG(0.15 + 0.35 * (1 - t));\r\n  } else {\r\n    return (t) => interpolateOranges(t * 0.85);\r\n  }\r\n};\r\n\r\nfunction MapVisualizer({\r\n  mapCode,\r\n  isDistrictView,\r\n  mapViz,\r\n  data,\r\n  regionHighlighted,\r\n  setRegionHighlighted,\r\n  statistic,\r\n  getMapStatistic,\r\n  transformStatistic,\r\n  noDistrictData,\r\n}) {\r\n  const {t} = useTranslation();\r\n  const svgRef = useRef(null);\r\n\r\n  const mapMeta = MAP_META[mapCode];\r\n  const history = useHistory();\r\n\r\n  const {data: geoData} = useSWR(\r\n    mapMeta.geoDataFile,\r\n    async (file) => {\r\n      return await json(file);\r\n    },\r\n    {suspense: false, revalidateOnFocus: false}\r\n  );\r\n\r\n  const statisticTotal = useMemo(() => {\r\n    return getMapStatistic(data[mapCode]);\r\n  }, [data, mapCode, getMapStatistic]);\r\n\r\n  const statisticConfig = STATISTIC_CONFIGS[statistic];\r\n\r\n  const strokeColor = useCallback(\r\n    (alpha) => (statisticConfig?.color || '#343a40') + alpha,\r\n    [statisticConfig]\r\n  );\r\n\r\n  const features = useMemo(() => {\r\n    if (!geoData) return null;\r\n\r\n    const featuresWrap = !isDistrictView\r\n      ? feature(geoData, geoData.objects.states).features\r\n      : mapMeta.mapType === MAP_TYPES.COUNTRY && mapViz !== MAP_VIZS.CHOROPLETH\r\n      ? [\r\n          ...feature(geoData, geoData.objects.states).features,\r\n          ...feature(geoData, geoData.objects.districts).features,\r\n        ]\r\n      : feature(geoData, geoData.objects.districts).features;\r\n    // Add id to each feature\r\n    return featuresWrap.map((feature) => {\r\n      const district = feature.properties.district;\r\n      const state = feature.properties.st_nm;\r\n      const obj = Object.assign({}, feature);\r\n      obj.id = `${mapCode}-${state}${district ? '-' + district : ''}`;\r\n      return obj;\r\n    });\r\n  }, [geoData, mapCode, isDistrictView, mapViz, mapMeta]);\r\n\r\n  const districtsSet = useMemo(() => {\r\n    if (!geoData || !isDistrictView) return {};\r\n    return feature(geoData, geoData.objects.districts).features.reduce(\r\n      (stateCodes, feature) => {\r\n        const stateCode = STATE_CODES[feature.properties.st_nm];\r\n        if (!stateCodes[stateCode]) {\r\n          stateCodes[stateCode] = new Set();\r\n        }\r\n        stateCodes[stateCode].add(feature.properties.district);\r\n        return stateCodes;\r\n      },\r\n      {}\r\n    );\r\n  }, [geoData, isDistrictView]);\r\n\r\n  const statisticMax = useMemo(() => {\r\n    const stateCodes = Object.keys(data).filter(\r\n      (stateCode) =>\r\n        stateCode !== 'TT' && Object.keys(MAP_META).includes(stateCode)\r\n    );\r\n\r\n    if (!isDistrictView) {\r\n      return max(stateCodes, (stateCode) =>\r\n        transformStatistic(getMapStatistic(data[stateCode]))\r\n      );\r\n    } else {\r\n      const districtData = stateCodes.reduce((res, stateCode) => {\r\n        const districts = Object.keys(data[stateCode]?.districts || []).filter(\r\n          (districtName) =>\r\n            (districtsSet?.[stateCode] || new Set()).has(districtName) ||\r\n            (mapViz !== MAP_VIZS.CHOROPLETH &&\r\n              districtName === UNKNOWN_DISTRICT_KEY)\r\n        );\r\n        res.push(\r\n          ...districts.map((districtName) =>\r\n            transformStatistic(\r\n              getMapStatistic(data[stateCode].districts[districtName])\r\n            )\r\n          )\r\n        );\r\n        return res;\r\n      }, []);\r\n      return max(districtData);\r\n    }\r\n  }, [\r\n    data,\r\n    isDistrictView,\r\n    getMapStatistic,\r\n    mapViz,\r\n    districtsSet,\r\n    transformStatistic,\r\n  ]);\r\n\r\n  const mapScale = useMemo(() => {\r\n    if (mapViz === MAP_VIZS.BUBBLE) {\r\n      // No negative values\r\n      return scaleSqrt([0, Math.max(1, statisticMax || 0)], [0, 40])\r\n        .clamp(true)\r\n        .nice(3);\r\n    } else if (mapViz === MAP_VIZS.SPIKE) {\r\n      return scaleLinear([0, Math.max(1, statisticMax || 0)], [0, 80])\r\n        .clamp(true)\r\n        .nice(3);\r\n    } else if (STATISTIC_CONFIGS[statistic]?.mapConfig?.colorScale) {\r\n      return STATISTIC_CONFIGS[statistic].mapConfig.colorScale;\r\n    } else {\r\n      // No negative values\r\n      return scaleSequential(\r\n        [0, Math.max(1, statisticMax || 0)],\r\n        colorInterpolator(statistic)\r\n      ).clamp(true);\r\n    }\r\n  }, [mapViz, statistic, statisticMax]);\r\n\r\n  const fillColor = useCallback(\r\n    (d) => {\r\n      if (mapViz === MAP_VIZS.CHOROPLETH) {\r\n        const stateCode = STATE_CODES[d.properties.st_nm];\r\n        const district = d.properties.district;\r\n        const stateData = data[stateCode];\r\n        const districtData = stateData?.districts?.[district];\r\n        const n = transformStatistic(\r\n          getMapStatistic(district ? districtData : stateData)\r\n        );\r\n        const color = n ? mapScale(n) : '#ffffff00';\r\n        return color;\r\n      }\r\n    },\r\n    [mapViz, data, mapScale, getMapStatistic, transformStatistic]\r\n  );\r\n\r\n  const populateTexts = useCallback(\r\n    (regionSelection) => {\r\n      regionSelection.select('title').text((d) => {\r\n        if (mapViz !== MAP_VIZS.CHOROPLETH && !statisticConfig?.nonLinear) {\r\n          const state = d.properties.st_nm;\r\n          const stateCode = STATE_CODES[state];\r\n          const district = d.properties.district;\r\n\r\n          const stateData = data[stateCode];\r\n          const districtData = stateData?.districts?.[district];\r\n          let n;\r\n          if (district) n = getMapStatistic(districtData);\r\n          else n = getMapStatistic(stateData);\r\n          return `${formatNumber(\r\n            100 * (n / (statisticTotal || 0.001)),\r\n            '%'\r\n          )} from ${toTitleCase(district ? district : state)}`;\r\n        }\r\n      });\r\n    },\r\n    [mapViz, data, getMapStatistic, statisticTotal, statisticConfig]\r\n  );\r\n\r\n  const onceTouchedRegion = useRef(null);\r\n\r\n  // Reset on tapping outside map\r\n  useEffect(() => {\r\n    const svg = select(svgRef.current);\r\n\r\n    svg.attr('pointer-events', 'auto').on('click', () => {\r\n      onceTouchedRegion.current = null;\r\n      setRegionHighlighted({\r\n        stateCode: mapCode,\r\n        districtName: null,\r\n      });\r\n    });\r\n  }, [mapCode, setRegionHighlighted]);\r\n\r\n  const path = useMemo(() => {\r\n    if (!geoData) return null;\r\n    return geoPath(geoIdentity());\r\n  }, [geoData]);\r\n\r\n  // Choropleth\r\n  useEffect(() => {\r\n    if (!geoData) return;\r\n    const svg = select(svgRef.current);\r\n    const T = transition().duration(D3_TRANSITION_DURATION);\r\n\r\n    svg\r\n      .select('.regions')\r\n      .selectAll('path')\r\n      .data(mapViz === MAP_VIZS.CHOROPLETH ? features : [], (d) => d.id)\r\n      .join(\r\n        (enter) =>\r\n          enter\r\n            .append('path')\r\n            .attr('d', path)\r\n            .attr('stroke-width', 1.8)\r\n            .attr('stroke-opacity', 0)\r\n            .style('cursor', 'pointer')\r\n            .on('mouseenter', (event, d) => {\r\n              if (onceTouchedRegion.current) return;\r\n              setRegionHighlighted({\r\n                stateCode: STATE_CODES[d.properties.st_nm],\r\n                districtName: d.properties.district,\r\n              });\r\n            })\r\n            .on('pointerdown', (event, d) => {\r\n              if (onceTouchedRegion.current === d)\r\n                onceTouchedRegion.current = null;\r\n              else onceTouchedRegion.current = d;\r\n              setRegionHighlighted({\r\n                stateCode: STATE_CODES[d.properties.st_nm],\r\n                districtName: d.properties.district,\r\n              });\r\n            })\r\n            .attr('fill', '#fff0')\r\n            .attr('stroke', '#fff0'),\r\n        (update) => update,\r\n        (exit) =>\r\n          exit\r\n            .transition(T)\r\n            .attr('stroke', '#fff0')\r\n            .attr('fill', '#fff0')\r\n            .remove()\r\n      )\r\n      .attr('pointer-events', 'all')\r\n      .on('click', (event, d) => {\r\n        event.stopPropagation();\r\n        const stateCode = STATE_CODES[d.properties.st_nm];\r\n        if (\r\n          onceTouchedRegion.current ||\r\n          mapMeta.mapType === MAP_TYPES.STATE ||\r\n          !data[stateCode]?.districts\r\n        )\r\n          return;\r\n        // Disable pointer events till the new map is rendered\r\n        svg.attr('pointer-events', 'none');\r\n        svg.select('.regions').selectAll('path').attr('pointer-events', 'none');\r\n        // Switch map\r\n        history.push(\r\n          `/state/${stateCode}${window.innerWidth < 769 ? '#MapExplorer' : ''}`\r\n        );\r\n      })\r\n      .call((sel) => {\r\n        sel\r\n          .transition(T)\r\n          .attr('fill', fillColor)\r\n          .attr('stroke', strokeColor.bind(this, ''));\r\n      });\r\n  }, [\r\n    mapViz,\r\n    data,\r\n    features,\r\n    fillColor,\r\n    geoData,\r\n    history,\r\n    mapMeta.mapType,\r\n    path,\r\n    setRegionHighlighted,\r\n    strokeColor,\r\n  ]);\r\n\r\n  const sortedFeatures = useMemo(() => {\r\n    if (mapViz === MAP_VIZS.CHOROPLETH) {\r\n      return [];\r\n    } else {\r\n      return (features || [])\r\n        .map((feature) => {\r\n          const stateCode = STATE_CODES[feature.properties.st_nm];\r\n          const districtName = feature.properties.district;\r\n          const stateData = data[stateCode];\r\n\r\n          if (!isDistrictView) {\r\n            feature.value = getMapStatistic(stateData);\r\n          } else {\r\n            const districtData = stateData?.districts?.[districtName];\r\n\r\n            if (districtName) feature.value = getMapStatistic(districtData);\r\n            else\r\n              feature.value = getMapStatistic(\r\n                stateData?.districts?.[UNKNOWN_DISTRICT_KEY]\r\n              );\r\n          }\r\n\r\n          return feature;\r\n        })\r\n        .filter((feature) => feature.value > 0)\r\n        .sort((featureA, featureB) => featureB.value - featureB.value);\r\n    }\r\n  }, [mapViz, isDistrictView, getMapStatistic, features, data]);\r\n\r\n  // Bubble\r\n  useEffect(() => {\r\n    const svg = select(svgRef.current);\r\n    const T = transition().duration(D3_TRANSITION_DURATION);\r\n\r\n    const regionSelection = svg\r\n      .select('.circles')\r\n      .selectAll('circle')\r\n      .data(\r\n        mapViz === MAP_VIZS.BUBBLE ? sortedFeatures : [],\r\n        (feature) => feature.id\r\n      )\r\n      .join(\r\n        (enter) =>\r\n          enter\r\n            .append('circle')\r\n            .attr(\r\n              'transform',\r\n              (feature) => `translate(${path.centroid(feature)})`\r\n            )\r\n            .attr('fill-opacity', 0.25)\r\n            .style('cursor', 'pointer')\r\n            .attr('pointer-events', 'all')\r\n            .call((enter) => {\r\n              enter.append('title');\r\n            }),\r\n        (update) => update,\r\n        (exit) => exit.call((exit) => exit.transition(T).attr('r', 0).remove())\r\n      )\r\n      .on('mouseenter', (event, feature) => {\r\n        if (onceTouchedRegion.current) return;\r\n        setRegionHighlighted({\r\n          stateCode: STATE_CODES[feature.properties.st_nm],\r\n          districtName: !isDistrictView\r\n            ? null\r\n            : feature.properties.district || UNKNOWN_DISTRICT_KEY,\r\n        });\r\n      })\r\n      .on('pointerdown', (event, feature) => {\r\n        if (onceTouchedRegion.current === feature)\r\n          onceTouchedRegion.current = null;\r\n        else onceTouchedRegion.current = feature;\r\n        setRegionHighlighted({\r\n          stateCode: STATE_CODES[feature.properties.st_nm],\r\n          districtName: !isDistrictView\r\n            ? null\r\n            : feature.properties.district || UNKNOWN_DISTRICT_KEY,\r\n        });\r\n      })\r\n      .on('click', (event, feature) => {\r\n        event.stopPropagation();\r\n        if (onceTouchedRegion.current || mapMeta.mapType === MAP_TYPES.STATE)\r\n          return;\r\n        history.push(\r\n          `/state/${STATE_CODES[feature.properties.st_nm]}${\r\n            window.innerWidth < 769 ? '#MapExplorer' : ''\r\n          }`\r\n        );\r\n      })\r\n      .call((sel) => {\r\n        sel\r\n          .transition(T)\r\n          .attr('fill', statisticConfig.color + '70')\r\n          .attr('stroke', statisticConfig.color + '70')\r\n          .attr('r', (feature) => mapScale(feature.value));\r\n      });\r\n\r\n    window.requestIdleCallback(() => {\r\n      populateTexts(regionSelection);\r\n    });\r\n  }, [\r\n    mapMeta.mapType,\r\n    mapViz,\r\n    isDistrictView,\r\n    sortedFeatures,\r\n    history,\r\n    mapScale,\r\n    path,\r\n    setRegionHighlighted,\r\n    populateTexts,\r\n    statisticConfig,\r\n    getMapStatistic,\r\n  ]);\r\n\r\n  // Spike (Note: bad unmodular code)\r\n  useEffect(() => {\r\n    const svg = select(svgRef.current);\r\n    const T = transition().duration(D3_TRANSITION_DURATION);\r\n\r\n    const regionSelection = svg\r\n      .select('.spikes')\r\n      .selectAll('path')\r\n      .data(\r\n        mapViz === MAP_VIZS.SPIKE ? sortedFeatures : [],\r\n        (feature) => feature.id,\r\n        (feature) => feature.id\r\n      )\r\n      .join(\r\n        (enter) =>\r\n          enter\r\n            .append('path')\r\n            .attr(\r\n              'transform',\r\n              (feature) => `translate(${path.centroid(feature)})`\r\n            )\r\n            .attr('opacity', 0)\r\n            .attr('fill-opacity', 0.25)\r\n            .style('cursor', 'pointer')\r\n            .attr('pointer-events', 'all')\r\n            .attr('d', spike(0))\r\n            .call((enter) => {\r\n              enter.append('title');\r\n            }),\r\n        (update) => update,\r\n        (exit) =>\r\n          exit.call((exit) =>\r\n            exit.transition(T).attr('opacity', 0).attr('d', spike(0)).remove()\r\n          )\r\n      )\r\n      .on('mouseenter', (event, feature) => {\r\n        if (onceTouchedRegion.current) return;\r\n        setRegionHighlighted({\r\n          stateCode: STATE_CODES[feature.properties.st_nm],\r\n          districtName: !isDistrictView\r\n            ? null\r\n            : feature.properties.district || UNKNOWN_DISTRICT_KEY,\r\n        });\r\n      })\r\n      .on('pointerdown', (event, feature) => {\r\n        if (onceTouchedRegion.current === feature)\r\n          onceTouchedRegion.current = null;\r\n        else onceTouchedRegion.current = feature;\r\n        setRegionHighlighted({\r\n          stateCode: STATE_CODES[feature.properties.st_nm],\r\n          districtName: !isDistrictView\r\n            ? null\r\n            : feature.properties.district || UNKNOWN_DISTRICT_KEY,\r\n        });\r\n      })\r\n      .on('click', (event, feature) => {\r\n        event.stopPropagation();\r\n        if (onceTouchedRegion.current || mapMeta.mapType === MAP_TYPES.STATE)\r\n          return;\r\n        history.push(\r\n          `/state/${STATE_CODES[feature.properties.st_nm]}${\r\n            window.innerWidth < 769 ? '#MapExplorer' : ''\r\n          }`\r\n        );\r\n      })\r\n      .call((sel) => {\r\n        sel\r\n          .transition(T)\r\n          .attr('opacity', 1)\r\n          .attr('fill', statisticConfig.color + '70')\r\n          .attr('stroke', statisticConfig.color + '70')\r\n          .attr('d', (feature) => spike(mapScale(feature.value)));\r\n      });\r\n\r\n    window.requestIdleCallback(() => {\r\n      populateTexts(regionSelection);\r\n    });\r\n  }, [\r\n    mapMeta.mapType,\r\n    mapViz,\r\n    isDistrictView,\r\n    sortedFeatures,\r\n    history,\r\n    mapScale,\r\n    path,\r\n    setRegionHighlighted,\r\n    populateTexts,\r\n    statisticConfig,\r\n    getMapStatistic,\r\n  ]);\r\n\r\n  // Boundaries\r\n  useEffect(() => {\r\n    if (!geoData) return;\r\n    const svg = select(svgRef.current);\r\n    const T = transition().duration(D3_TRANSITION_DURATION);\r\n\r\n    let meshStates = [];\r\n    let meshDistricts = [];\r\n\r\n    if (mapMeta.mapType === MAP_TYPES.COUNTRY) {\r\n      meshStates = [mesh(geoData, geoData.objects.states)];\r\n      meshStates[0].id = `${mapCode}-states`;\r\n    }\r\n\r\n    if (\r\n      mapMeta.mapType === MAP_TYPES.STATE ||\r\n      (isDistrictView && mapViz === MAP_VIZS.CHOROPLETH)\r\n    ) {\r\n      // Add id to mesh\r\n      meshDistricts = [mesh(geoData, geoData.objects.districts)];\r\n      meshDistricts[0].id = `${mapCode}-districts`;\r\n    }\r\n\r\n    svg\r\n      .select('.state-borders')\r\n      .attr('fill', 'none')\r\n      .attr('stroke-width', 1.5)\r\n      .selectAll('path')\r\n      .data(meshStates, (d) => d.id)\r\n      .join(\r\n        (enter) => enter.append('path').attr('d', path).attr('stroke', '#fff0'),\r\n        (update) => update,\r\n        (exit) => exit.transition(T).attr('stroke', '#fff0').remove()\r\n      )\r\n      .transition(T)\r\n      .attr('stroke', strokeColor.bind(this, '40'));\r\n\r\n    svg\r\n      .select('.district-borders')\r\n      .attr('fill', 'none')\r\n      .attr('stroke-width', 1.5)\r\n      .selectAll('path')\r\n      .data(meshDistricts, (d) => d.id)\r\n      .join(\r\n        (enter) =>\r\n          enter\r\n            .append('path')\r\n            .attr('d', path)\r\n            .attr('d', path)\r\n            .attr('stroke', '#fff0'),\r\n        (update) => update,\r\n        (exit) => exit.transition(T).attr('stroke', '#fff0').remove()\r\n      )\r\n      .transition(T)\r\n      .attr('stroke', strokeColor.bind(this, '40'));\r\n  }, [\r\n    geoData,\r\n    mapMeta,\r\n    mapCode,\r\n    mapViz,\r\n    isDistrictView,\r\n    statistic,\r\n    path,\r\n    strokeColor,\r\n  ]);\r\n\r\n  // Highlight\r\n  useEffect(() => {\r\n    const stateCode = regionHighlighted.stateCode;\r\n    const stateName = STATE_NAMES[stateCode];\r\n    const district = regionHighlighted.districtName;\r\n\r\n    const svg = select(svgRef.current);\r\n\r\n    if (mapViz === MAP_VIZS.BUBBLE) {\r\n      svg\r\n        .select('.circles')\r\n        .selectAll('circle')\r\n        .attr('fill-opacity', (d) => {\r\n          const highlighted =\r\n            stateName === d.properties.st_nm &&\r\n            ((!district && stateCode !== mapCode) ||\r\n              district === d.properties?.district ||\r\n              !isDistrictView ||\r\n              (district === UNKNOWN_DISTRICT_KEY && !d.properties.district));\r\n          return highlighted ? 1 : 0.25;\r\n        });\r\n    } else if (mapViz === MAP_VIZS.SPIKE) {\r\n      svg\r\n        .select('.spikes')\r\n        .selectAll('path')\r\n        .attr('fill-opacity', (d) => {\r\n          const highlighted =\r\n            stateName === d.properties.st_nm &&\r\n            ((!district && stateCode !== mapCode) ||\r\n              district === d.properties?.district ||\r\n              !isDistrictView ||\r\n              (district === UNKNOWN_DISTRICT_KEY && !d.properties.district));\r\n          return highlighted ? 1 : 0.25;\r\n        });\r\n    } else {\r\n      svg\r\n        .select('.regions')\r\n        .selectAll('path')\r\n        .each(function (d) {\r\n          const highlighted =\r\n            stateName === d.properties.st_nm &&\r\n            ((!district && stateCode !== mapCode) ||\r\n              district === d.properties?.district ||\r\n              !isDistrictView);\r\n          if (highlighted) this.parentNode.appendChild(this);\r\n          select(this).attr('stroke-opacity', highlighted ? 1 : 0);\r\n        });\r\n    }\r\n  }, [\r\n    geoData,\r\n    data,\r\n    mapCode,\r\n    isDistrictView,\r\n    mapViz,\r\n    regionHighlighted.stateCode,\r\n    regionHighlighted.districtName,\r\n    statistic,\r\n  ]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"svg-parent\">\r\n        <svg\r\n          id=\"chart\"\r\n          className={classnames({\r\n            zone: !!statisticConfig?.mapConfig?.colorScale,\r\n          })}\r\n          viewBox={`0 0 ${MAP_DIMENSIONS[0]} ${MAP_DIMENSIONS[1]}`}\r\n          preserveAspectRatio=\"xMidYMid meet\"\r\n          ref={svgRef}\r\n        >\r\n          <g className=\"regions\" />\r\n          <g className=\"state-borders\" />\r\n          <g className=\"district-borders\" />\r\n          <g className=\"circles\" />\r\n          <g className=\"spikes\" />\r\n        </svg>\r\n        {noDistrictData && statisticConfig?.hasPrimary && (\r\n          <div className={classnames('disclaimer', `is-${statistic}`)}>\r\n            <AlertIcon />\r\n            <span>\r\n              {t('District-wise data not available in state bulletin')}\r\n            </span>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {mapScale && <MapLegend {...{data, statistic, mapViz, mapScale}} />}\r\n\r\n      <svg style={{position: 'absolute', height: 0}}>\r\n        <defs>\r\n          <filter id=\"balance-color\" colorInterpolationFilters=\"sRGB\">\r\n            <feColorMatrix\r\n              type=\"matrix\"\r\n              values=\"0.91372549  0           0            0  0.08627451\r\n                      0           0.91372549  0            0  0.08627451\r\n                      0           0           0.854901961  0  0.145098039\r\n                      0           0           0            1  0\"\r\n            />\r\n          </filter>\r\n        </defs>\r\n      </svg>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MapVisualizer;\r\n"],"sourceRoot":""}