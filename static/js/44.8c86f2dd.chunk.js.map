{"version":3,"sources":["components/MapSwitcher.js"],"names":["MapSwitcher","mapStatistic","setMapStatistic","useMeasure","mapSwitcher","width","useState","clicked","setClicked","count","setCount","isPresent","LEVEL_STATISTICS","indexOf","useSpring","opacity","background","STATISTIC_CONFIGS","color","transform","length","config","gentle","spring","springApi","useEffect","ReactDOM","unstable_batchedUpdates","start","delay","onStart","bind","onRest","handleClick","useCallback","statistic","prevCount","className","ref","div","style","map","index","classnames","onClick","isEqual","prevProps","currProps","memo"],"mappings":"wNAQMA,EAAc,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,gBAClC,EAA+BC,cAA/B,mBAAOC,EAAP,KAAqBC,EAArB,KAAqBA,MACrB,EAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA0BF,mBAAS,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAEMC,EAAYC,IAAiBC,QAAQZ,IAAiB,EAE5D,EAA4Ba,qBAAU,iBAAO,CAC3CC,QAAS,EACTC,WAAW,GAAD,OAAKC,IAAkBhB,GAAciB,MAArC,MACVC,UAAWR,EAAS,sBAEbN,EAAQO,IAAiBC,QAAQZ,GAClCW,IAAiBQ,OAHH,aAKhB,KACJf,MAAM,QAAD,OAAU,IAAMO,IAAiBQ,OAAjC,MACLC,OAAQA,SAAOC,WAVjB,mBAAOC,EAAP,KAAeC,EAAf,KAaAC,qBAAU,WACR,GAAIpB,EAAQ,EAAG,CACb,IAAMM,EAAYC,IAAiBC,QAAQZ,IAAiB,EAC5DyB,IAASC,yBAAwB,WAAO,IAAD,EACrCH,EAAUI,MAAM,CACdT,UAAWR,EAAS,sBAEbN,EAAQO,IAAiBC,QAAQZ,GAClCW,IAAiBQ,OAHH,aAKhB,KACJL,QAASJ,EAAY,EAAI,EACzBK,WAAYL,EAAS,oBACdM,IAAkBhB,UADJ,aACd,EAAiCiB,MADnB,MAEjB,KACJW,MAAiB,IAAVpB,EAAc,KAAO,EAC5BqB,QAAStB,EAAWuB,KAAK,GAAM,GAC/BC,OAAQxB,EAAWuB,KAAK,GAAM,WAInC,CAACtB,EAAOR,EAAcuB,EAAWnB,IAEpC,IAAM4B,EAAcC,uBAClB,SAACC,GACCzB,GAAS,SAAC0B,GAAD,OAAeA,EAAY,KACpClC,EAAgBiC,KAElB,CAACjC,IAGH,OACE,sBAAKmC,UAAU,cAAcC,IAAKlC,EAAlC,UACE,cAAC,WAASmC,IAAV,CAAcF,UAAU,YAAYG,MAAOjB,IAE1CX,IAAiB6B,KAAI,SAACN,EAAWO,GAAZ,OACpB,qBAEEL,UAAWM,IAAW,YAAD,4BAAsBR,IAAe5B,IAC1DqC,QAASX,EAAYF,KAAK,EAAMI,GAChCK,MAAO,CAACnC,MAAM,QAAD,OAAU,IAAMO,IAAiBQ,OAAjC,QAHRsB,UAUTG,EAAU,SAACC,EAAWC,GAC1B,OAAID,EAAU7C,eAAiB8C,EAAU9C,cAM5B+C,yBAAKhD,EAAa6C","file":"static/js/44.8c86f2dd.chunk.js","sourcesContent":["import {LEVEL_STATISTICS, STATISTIC_CONFIGS} from '../constants';\r\n\r\nimport classnames from 'classnames';\r\nimport {memo, useState, useCallback, useEffect} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {useSpring, animated, config} from 'react-spring';\r\nimport {useMeasure} from 'react-use';\r\n\r\nconst MapSwitcher = ({mapStatistic, setMapStatistic}) => {\r\n  const [mapSwitcher, {width}] = useMeasure();\r\n  const [clicked, setClicked] = useState(false);\r\n  const [count, setCount] = useState(0);\r\n\r\n  const isPresent = LEVEL_STATISTICS.indexOf(mapStatistic) >= 0;\r\n\r\n  const [spring, springApi] = useSpring(() => ({\r\n    opacity: 0,\r\n    background: `${STATISTIC_CONFIGS[mapStatistic].color}20`,\r\n    transform: isPresent\r\n      ? `translate3d(${\r\n          (width * LEVEL_STATISTICS.indexOf(mapStatistic)) /\r\n          LEVEL_STATISTICS.length\r\n        }px, 0, 0)`\r\n      : null,\r\n    width: `calc(${100 / LEVEL_STATISTICS.length}%)`,\r\n    config: config.gentle,\r\n  }));\r\n\r\n  useEffect(() => {\r\n    if (width > 0) {\r\n      const isPresent = LEVEL_STATISTICS.indexOf(mapStatistic) >= 0;\r\n      ReactDOM.unstable_batchedUpdates(() => {\r\n        springApi.start({\r\n          transform: isPresent\r\n            ? `translate3d(${\r\n                (width * LEVEL_STATISTICS.indexOf(mapStatistic)) /\r\n                LEVEL_STATISTICS.length\r\n              }px, 0, 0)`\r\n            : null,\r\n          opacity: isPresent ? 1 : 0,\r\n          background: isPresent\r\n            ? `${STATISTIC_CONFIGS[mapStatistic]?.color}20`\r\n            : null,\r\n          delay: count === 0 ? 1500 : 0,\r\n          onStart: setClicked.bind(this, true),\r\n          onRest: setClicked.bind(this, false),\r\n        });\r\n      });\r\n    }\r\n  }, [count, mapStatistic, springApi, width]);\r\n\r\n  const handleClick = useCallback(\r\n    (statistic) => {\r\n      setCount((prevCount) => prevCount + 1);\r\n      setMapStatistic(statistic);\r\n    },\r\n    [setMapStatistic]\r\n  );\r\n\r\n  return (\r\n    <div className=\"MapSwitcher\" ref={mapSwitcher}>\r\n      <animated.div className=\"highlight\" style={spring}></animated.div>\r\n\r\n      {LEVEL_STATISTICS.map((statistic, index) => (\r\n        <div\r\n          key={index}\r\n          className={classnames('clickable', {[`is-${statistic}`]: !clicked})}\r\n          onClick={handleClick.bind(this, statistic)}\r\n          style={{width: `calc(${100 / LEVEL_STATISTICS.length}%)`}}\r\n        ></div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst isEqual = (prevProps, currProps) => {\r\n  if (prevProps.mapStatistic !== currProps.mapStatistic) {\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nexport default memo(MapSwitcher, isEqual);\r\n"],"sourceRoot":""}