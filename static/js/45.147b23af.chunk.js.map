{"version":3,"sources":["components/Cell.js","components/DistrictRow.js","components/Row.js"],"names":["Cell","statistic","data","getTableStatistic","noDistrictData","total","delta","spring","useSpring","config","SPRING_CONFIG_NUMBERS","statisticConfig","STATISTIC_CONFIGS","className","showDelta","div","classnames","title","to","hasPrimary","formatNumber","format","Math","abs","isCellEqual","prevProps","currProps","equal","memo","DistrictRow","stateCode","districtName","tableStatistics","regionHighlighted","setRegionHighlighted","expandTable","t","useTranslation","highlightDistrict","useCallback","produce","draftRegionHighlighted","onMouseEnter","meta","notes","Tooltip","message","size","map","isDistrictRowEqual","Row","tableWidth","useState","showDistricts","setShowDistricts","useSessionStorage","sortColumn","isAscending","sortData","setSortData","history","useHistory","rowElement","useRef","handleSortClick","draftSortData","sortingFunction","districtNameA","districtNameB","dataType","statisticA","districts","statisticB","localeCompare","highlightState","_setShowDistrict","districtNameStr","UNKNOWN_DISTRICT_KEY","STATE_NAMES","handleStatePageClick","push","handleCollapse","current","scrollIntoView","block","onClick","ref","style","width","bind","this","capitalize","formatLastUpdated","last_updated","HeaderCell","handleSort","Object","keys","sort","a","b","isEqual"],"mappings":"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","file":"static/js/45.147b23af.chunk.js","sourcesContent":["import {SPRING_CONFIG_NUMBERS, STATISTIC_CONFIGS} from '../constants.js';\nimport {formatNumber} from '../utils/commonFunctions';\n\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport {memo} from 'react';\nimport {animated, useSpring} from 'react-spring';\n\nconst Cell = ({statistic, data, getTableStatistic, noDistrictData}) => {\n  const total = getTableStatistic(data, statistic, 'total');\n  const delta = getTableStatistic(data, statistic, 'delta');\n\n  const spring = useSpring({\n    total: total,\n    delta: delta,\n    config: SPRING_CONFIG_NUMBERS,\n  });\n\n  const statisticConfig = STATISTIC_CONFIGS[statistic];\n\n  return (\n    <div className=\"cell statistic\">\n      {statisticConfig?.showDelta && (\n        <animated.div\n          className={classnames('delta', `is-${statistic}`)}\n          title={delta}\n        >\n          {spring.delta.to((delta) =>\n            !noDistrictData || !statisticConfig.hasPrimary\n              ? delta > 0\n                ? '\\u2191' + formatNumber(delta, statisticConfig.format)\n                : delta < 0\n                ? '\\u2193' +\n                  formatNumber(Math.abs(delta), statisticConfig.format)\n                : ''\n              : ''\n          )}\n        </animated.div>\n      )}\n\n      <animated.div className=\"total\" title={total}>\n        {spring.total.to((total) =>\n          !noDistrictData || !statisticConfig.hasPrimary\n            ? formatNumber(total, statisticConfig.format, statistic)\n            : '-'\n        )}\n      </animated.div>\n    </div>\n  );\n};\n\nconst isCellEqual = (prevProps, currProps) => {\n  if (!equal(prevProps.data?.total, currProps.data?.total)) {\n    return false;\n  } else if (!equal(prevProps.data?.delta, currProps.data?.delta)) {\n    return false;\n  } else if (\n    !equal(prevProps.data?.noDistrictData, currProps.data?.noDistrictData)\n  ) {\n    return false;\n  } else if (!equal(prevProps.getTableStatistic, currProps.getTableStatistic)) {\n    return false;\n  }\n  return true;\n};\n\nexport default memo(Cell, isCellEqual);\n","import Cell from './Cell';\nimport Tooltip from './Tooltip';\n\nimport {InfoIcon} from '@primer/octicons-react';\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport produce from 'immer';\nimport {memo, useCallback} from 'react';\nimport {useTranslation} from 'react-i18next';\n\nfunction DistrictRow({\n  stateCode,\n  districtName,\n  data,\n  tableStatistics,\n  regionHighlighted,\n  setRegionHighlighted,\n  expandTable,\n  getTableStatistic,\n  noDistrictData,\n}) {\n  const {t} = useTranslation();\n\n  const highlightDistrict = useCallback(() => {\n    if (regionHighlighted.districtName !== districtName) {\n      setRegionHighlighted(\n        produce(regionHighlighted, (draftRegionHighlighted) => {\n          draftRegionHighlighted.stateCode = stateCode;\n          draftRegionHighlighted.districtName = districtName;\n        })\n      );\n    }\n  }, [regionHighlighted, districtName, setRegionHighlighted, stateCode]);\n\n  return (\n    <div\n      className={classnames('row', 'district', {\n        'is-highlighted': regionHighlighted?.districtName === districtName,\n      })}\n      onMouseEnter={highlightDistrict}\n    >\n      <div className=\"cell\">\n        <div className=\"state-name\">{t(districtName)}</div>\n        {data?.meta?.notes && (\n          <Tooltip message={data.meta.notes}>\n            <InfoIcon size={16} />\n          </Tooltip>\n        )}\n      </div>\n\n      {tableStatistics.map((statistic) => (\n        <Cell\n          key={statistic}\n          {...{\n            statistic,\n            data,\n            getTableStatistic,\n            noDistrictData,\n          }}\n        />\n      ))}\n    </div>\n  );\n}\n\nconst isDistrictRowEqual = (prevProps, currProps) => {\n  if (!equal(prevProps.data?.total, currProps.data?.total)) {\n    return false;\n  } else if (!equal(prevProps.data?.delta, currProps.data?.delta)) {\n    return false;\n  } else if (\n    !equal(prevProps.data?.['last_updated'], currProps.data?.['last_updated'])\n  ) {\n    return false;\n  } else if (\n    !equal(\n      prevProps.regionHighlighted.districtName,\n      currProps.regionHighlighted.districtName\n    ) &&\n    (equal(prevProps.regionHighlighted.districtName, prevProps.districtName) ||\n      equal(currProps.regionHighlighted.districtName, currProps.districtName))\n  ) {\n    return false;\n  } else if (!equal(prevProps.expandTable, currProps.expandTable)) {\n    return false;\n  } else if (!equal(prevProps.noDistrictData, currProps.noDistrictData)) {\n    return false;\n  } else if (!equal(prevProps.getTableStatistic, currProps.getTableStatistic)) {\n    return false;\n  } else if (!equal(prevProps.tableStatistics, currProps.tableStatistics)) {\n    return false;\n  }\n  return true;\n};\n\nexport default memo(DistrictRow, isDistrictRowEqual);\n","import Cell from './Cell';\nimport DistrictRow from './DistrictRow';\nimport HeaderCell from './HeaderCell';\nimport Tooltip from './Tooltip';\n\nimport {\n  STATE_NAMES,\n  STATISTIC_CONFIGS,\n  UNKNOWN_DISTRICT_KEY,\n} from '../constants';\nimport {capitalize, formatLastUpdated} from '../utils/commonFunctions';\n\nimport {\n  AlertIcon,\n  ClockIcon,\n  SortAscIcon,\n  SortDescIcon,\n  FoldUpIcon,\n  GraphIcon,\n  InfoIcon,\n} from '@primer/octicons-react';\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport produce from 'immer';\nimport {memo, useCallback, useRef, useState} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {useHistory} from 'react-router-dom';\nimport {useSessionStorage} from 'react-use';\n\nfunction Row({\n  data,\n  tableStatistics,\n  stateCode,\n  districtName,\n  regionHighlighted,\n  setRegionHighlighted,\n  expandTable,\n  getTableStatistic,\n  tableWidth,\n  noDistrictData,\n}) {\n  const [showDistricts, setShowDistricts] = useState(false);\n  const [sortData, setSortData] = useSessionStorage('districtSortData', {\n    sortColumn: 'confirmed',\n    isAscending: false,\n    delta: false,\n  });\n\n  const history = useHistory();\n  const {t} = useTranslation();\n\n  const rowElement = useRef();\n\n  const handleSortClick = useCallback(\n    (statistic) => {\n      if (sortData.sortColumn !== statistic) {\n        setSortData(\n          produce(sortData, (draftSortData) => {\n            if (\n              sortData.sortColumn === 'districtName' ||\n              statistic === 'districtName'\n            ) {\n              draftSortData.isAscending = !sortData.isAscending;\n            }\n            draftSortData.sortColumn = statistic;\n          })\n        );\n      } else {\n        setSortData(\n          produce(sortData, (draftSortData) => {\n            draftSortData.isAscending = !sortData.isAscending;\n          })\n        );\n      }\n    },\n    [sortData, setSortData]\n  );\n\n  const sortingFunction = useCallback(\n    (districtNameA, districtNameB) => {\n      if (sortData.sortColumn !== 'districtName') {\n        const statisticConfig = STATISTIC_CONFIGS[sortData.sortColumn];\n        const dataType =\n          sortData.delta && statisticConfig?.showDelta ? 'delta' : 'total';\n\n        const statisticA = getTableStatistic(\n          data.districts[districtNameA],\n          sortData.sortColumn,\n          dataType\n        );\n        const statisticB = getTableStatistic(\n          data.districts[districtNameB],\n          sortData.sortColumn,\n          dataType\n        );\n        return sortData.isAscending\n          ? statisticA - statisticB\n          : statisticB - statisticA;\n      } else {\n        return sortData.isAscending\n          ? districtNameA.localeCompare(districtNameB)\n          : districtNameB.localeCompare(districtNameA);\n      }\n    },\n    [sortData, data, getTableStatistic]\n  );\n\n  const highlightState = useCallback(() => {\n    if (stateCode) {\n      if (regionHighlighted.stateCode !== stateCode) {\n        setRegionHighlighted(\n          produce(regionHighlighted, (draftRegionHighlighted) => {\n            draftRegionHighlighted.stateCode = stateCode;\n            draftRegionHighlighted.districtName = null;\n          })\n        );\n      }\n    } else if (districtName) {\n      if (\n        regionHighlighted.districtName !== districtName ||\n        regionHighlighted.stateCode !== data.stateCode\n      ) {\n        setRegionHighlighted(\n          produce(regionHighlighted, (draftRegionHighlighted) => {\n            draftRegionHighlighted.stateCode = data.stateCode;\n            draftRegionHighlighted.districtName = districtName;\n          })\n        );\n      }\n    }\n  }, [\n    data.stateCode,\n    districtName,\n    regionHighlighted,\n    setRegionHighlighted,\n    stateCode,\n  ]);\n\n  const _setShowDistrict = useCallback(() => {\n    if (data.districts) {\n      setShowDistricts(!showDistricts);\n    }\n  }, [showDistricts, data]);\n\n  let districtNameStr = t(districtName);\n  if (districtName === UNKNOWN_DISTRICT_KEY) {\n    districtNameStr = `${t(UNKNOWN_DISTRICT_KEY)} [${t(\n      STATE_NAMES[data.stateCode]\n    )}]`;\n  }\n\n  const handleStatePageClick = useCallback(\n    (stateCode) => {\n      history.push(`state/${stateCode}`);\n    },\n    [history]\n  );\n\n  const handleCollapse = useCallback(() => {\n    setShowDistricts(false);\n    rowElement.current.scrollIntoView({\n      block: 'start',\n    });\n  }, []);\n\n  return (\n    <>\n      <div\n        className={classnames(\n          'row',\n          {'is-total': stateCode === 'TT'},\n          {\n            'is-highlighted':\n              (stateCode && regionHighlighted?.stateCode === stateCode) ||\n              (districtName &&\n                regionHighlighted?.districtName === districtName &&\n                regionHighlighted?.stateCode === data.stateCode),\n          }\n        )}\n        onMouseEnter={highlightState}\n        onClick={_setShowDistrict}\n        ref={rowElement}\n      >\n        <div className=\"cell\">\n          <div className=\"state-name fadeInUp\">\n            {t(STATE_NAMES[stateCode]) || districtNameStr}\n          </div>\n          {data?.meta?.notes && (\n            <Tooltip message={data.meta.notes}>\n              <InfoIcon size={16} />\n            </Tooltip>\n          )}\n        </div>\n\n        {tableStatistics.map((statistic) => (\n          <Cell\n            key={statistic}\n            noDistrictData={\n              !stateCode &&\n              districtName !== UNKNOWN_DISTRICT_KEY &&\n              noDistrictData\n            }\n            {...{\n              data,\n              statistic,\n              getTableStatistic,\n            }}\n          />\n        ))}\n      </div>\n\n      {showDistricts && (\n        <>\n          <div className=\"state-meta\" style={{width: tableWidth}}>\n            <div className=\"state-meta-top\">\n              <div\n                className=\"state-page\"\n                onClick={handleStatePageClick.bind(this, stateCode)}\n              >\n                <GraphIcon />\n                <span>{t('See more details')}</span>\n              </div>\n              {data?.meta?.['last_updated'] && (\n                <p className=\"last-updated\">\n                  <ClockIcon />\n                  {capitalize(\n                    `${formatLastUpdated(data.meta.last_updated)} ${t('ago')}`\n                  )}\n                </p>\n              )}\n            </div>\n\n            {data.districts && UNKNOWN_DISTRICT_KEY in data.districts && (\n              <div className=\"state-meta-bottom\">\n                <div className={classnames('disclaimer')}>\n                  <AlertIcon />\n                  <span>\n                    {t('District-wise data not available in state bulletin')}\n                  </span>\n                </div>\n              </div>\n            )}\n          </div>\n\n          <div className={classnames('row', 'heading')}>\n            <div\n              className=\"cell heading\"\n              onClick={handleSortClick.bind(this, 'districtName')}\n            >\n              <div className=\"district-name\">{t('District')}</div>\n              {sortData.sortColumn === 'districtName' && (\n                <div className={'sort-icon'}>\n                  {sortData.isAscending ? (\n                    <SortAscIcon size={12} />\n                  ) : (\n                    <SortDescIcon size={12} />\n                  )}\n                </div>\n              )}\n            </div>\n\n            {tableStatistics.map((statistic) => (\n              <HeaderCell\n                key={statistic}\n                {...{statistic, sortData, setSortData}}\n                handleSort={handleSortClick.bind(this, statistic)}\n              />\n            ))}\n          </div>\n        </>\n      )}\n\n      {showDistricts &&\n        Object.keys(data.districts || {})\n          .sort((a, b) => sortingFunction(a, b))\n          .map((districtName) => (\n            <DistrictRow\n              data={data.districts[districtName]}\n              key={districtName}\n              noDistrictData={\n                districtName !== UNKNOWN_DISTRICT_KEY && noDistrictData\n              }\n              {...{\n                tableStatistics,\n                districtName,\n                regionHighlighted,\n                setRegionHighlighted,\n                stateCode,\n                expandTable,\n                getTableStatistic,\n              }}\n            />\n          ))}\n\n      {showDistricts && (\n        <div className=\"spacer-row\" style={{width: tableWidth}}>\n          <div className=\"spacer\">\n            <p>{`End of ${t(STATE_NAMES[stateCode])}'s districts`}</p>\n            <div className=\"fold\" onClick={handleCollapse}>\n              <FoldUpIcon />\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(prevProps.data?.total, currProps.data?.total)) {\n    return false;\n  } else if (!equal(prevProps.data?.delta, currProps.data?.delta)) {\n    return false;\n  } else if (\n    (!equal(\n      prevProps.regionHighlighted.stateCode,\n      currProps.regionHighlighted.stateCode\n    ) &&\n      equal(prevProps.regionHighlighted.stateCode, prevProps.stateCode)) ||\n    equal(currProps.regionHighlighted.stateCode, currProps.stateCode)\n  ) {\n    return false;\n  } else if (\n    (!equal(\n      prevProps.regionHighlighted.districtName,\n      currProps.regionHighlighted.districtName\n    ) &&\n      equal(\n        prevProps.regionHighlighted.districtName,\n        prevProps.districtName\n      )) ||\n    equal(currProps.regionHighlighted.districtName, currProps.districtName)\n  ) {\n    return false;\n  } else if (!equal(prevProps.expandTable, currProps.expandTable)) {\n    return false;\n  } else if (!equal(prevProps.noDistrictData, currProps.noDistrictData)) {\n    return false;\n  } else if (!equal(prevProps.tableWidth, currProps.tableWidth)) {\n    return false;\n  } else if (!equal(prevProps.getTableStatistic, currProps.getTableStatistic)) {\n    return false;\n  } else if (!equal(prevProps.tableStatistics, currProps.tableStatistics)) {\n    return false;\n  } else return true;\n};\n\nexport default memo(Row, isEqual);\n"],"sourceRoot":""}