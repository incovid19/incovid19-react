{"version":3,"sources":["components/Calendar.js"],"names":["Calendar","date","dates","slider","useState","view","setView","parseIndiaDate","activeStartDate","setActiveStartDate","minDate","maxDate","length","handleNavigation","direction","newDate","add","months","years","lower","startOfMonth","startOfYear","upper","endOfMonth","endOfYear","swipeHandlers","useSwipeable","onSwipedRight","bind","this","onSwipedLeft","className","onWheel","event","deltaX","Math","sign","value","tileDisabled","includes","formatISO","representation","onActiveStartDateChange","onViewChange","minDetail","showFixedNumberOfWeeks","onChange","clickedDate","moveToSlide","indexOf","prevLabel","size","nextLabel","prev2Label","next2Label","isEqual","prevProps","currProps","equal","memo"],"mappings":"uRAqBA,SAASA,EAAT,GAA0C,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,OAC9B,EAAwBC,mBAAS,SAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8CF,mBAASG,YAAeN,IAAtE,mBAAOO,EAAP,KAAwBC,EAAxB,KAEMC,EAAUH,YAAeL,EAAM,IAC/BS,EAAUJ,YAAeL,EAAMA,EAAMU,OAAS,IAsB9CC,EAAmB,SAACC,GACxB,IAAMC,EAAUC,YACdR,EACS,UAATH,EAAmB,CAACY,OAAQH,GAAa,CAACI,MAAOJ,IAE7CK,EACK,UAATd,EAAmBe,YAAaV,GAAWW,YAAYX,GACnDY,EAAiB,UAATjB,EAAmBkB,YAAWZ,GAAWa,YAAUb,GAC7DQ,GAASJ,GAAWA,GAAWO,GACjCb,EAAmBM,IAIjBU,EAAgBC,uBAAa,CACjCC,cAAed,EAAiBe,KAAKC,MAAO,GAC5CC,aAAcjB,EAAiBe,KAAKC,KAAM,KAS5C,OACE,6CAAKE,UAAU,WAAWC,QAPR,SAACC,GACE,IAAjBA,EAAMC,QACRrB,EAAiBsB,KAAKC,KAAKH,EAAMC,WAKiBT,GAApD,aACE,cAAC,IAAD,CACEY,MAAO9B,YAAeN,GACtBqC,aAhDiB,SAAC,GAAkB,IAAjBrC,EAAgB,EAAhBA,KACvB,MACW,UAF4B,EAAVI,OAG1BH,EAAMqC,SAASC,YAAUvC,EAAM,CAACwC,eAAgB,WA8C1C/B,UAASC,UAASH,kBAAiBH,OACxCqC,wBAlCyB,SAAC,GAAuB,IAAtBlC,EAAqB,EAArBA,gBAC/BC,EAAmBD,IAkCfmC,aAvCmB,SAAC,GAAY,IAAXtC,EAAU,EAAVA,KACzBC,EAAQD,IAuCJuC,UAAU,OACVC,wBAAsB,EACtBC,SA/CsB,SAACT,GAC3B,IAAMU,EAAcP,YAAUH,EAAO,CAACI,eAAgB,SACtDtC,EAAO6C,YAAY9C,EAAM+C,QAAQF,KA8C7BG,UACE,8BACE,cAAC,IAAD,CAAaC,KAAM,OAGvBC,UACE,8BACE,cAAC,IAAD,CAAcD,KAAM,OAGxBE,WACE,8BACE,cAAC,IAAD,CAAcF,KAAM,OAGxBG,WACE,8BACE,cAAC,IAAD,CAAeH,KAAM,YAQjC,IAAMI,EAAU,SAACC,EAAWC,GAC1B,QAAKC,IAAMD,EAAUxD,KAAMuD,EAAUvD,SAEzByD,IAAMD,EAAUvD,MAAOsD,EAAUtD,QAMhCyD,yBAAK3D,EAAUuD","file":"static/js/43.23cf21d0.chunk.js","sourcesContent":["import {parseIndiaDate} from '../utils/commonFunctions';\r\n\r\nimport {\r\n  add,\r\n  formatISO,\r\n  startOfMonth,\r\n  startOfYear,\r\n  endOfMonth,\r\n  endOfYear,\r\n} from 'date-fns';\r\nimport equal from 'fast-deep-equal';\r\nimport {memo, useState} from 'react';\r\nimport ReactCalendar from 'react-calendar';\r\nimport {\r\n  ChevronLeft,\r\n  ChevronsLeft,\r\n  ChevronRight,\r\n  ChevronsRight,\r\n} from 'react-feather';\r\nimport {useSwipeable} from 'react-swipeable';\r\n\r\nfunction Calendar({date, dates, slider}) {\r\n  const [view, setView] = useState('month');\r\n  const [activeStartDate, setActiveStartDate] = useState(parseIndiaDate(date));\r\n\r\n  const minDate = parseIndiaDate(dates[0]);\r\n  const maxDate = parseIndiaDate(dates[dates.length - 1]);\r\n\r\n  const isDateDisabled = ({date, view}) => {\r\n    return (\r\n      view === 'month' &&\r\n      !dates.includes(formatISO(date, {representation: 'date'}))\r\n    );\r\n  };\r\n\r\n  const handleCalendarClick = (value) => {\r\n    const clickedDate = formatISO(value, {representation: 'date'});\r\n    slider.moveToSlide(dates.indexOf(clickedDate));\r\n  };\r\n\r\n  const handleViewButton = ({view}) => {\r\n    setView(view);\r\n  };\r\n\r\n  const handleNavigationButton = ({activeStartDate}) => {\r\n    setActiveStartDate(activeStartDate);\r\n  };\r\n\r\n  const handleNavigation = (direction) => {\r\n    const newDate = add(\r\n      activeStartDate,\r\n      view === 'month' ? {months: direction} : {years: direction}\r\n    );\r\n    const lower =\r\n      view === 'month' ? startOfMonth(minDate) : startOfYear(minDate);\r\n    const upper = view === 'month' ? endOfMonth(maxDate) : endOfYear(maxDate);\r\n    if (lower <= newDate && newDate <= upper) {\r\n      setActiveStartDate(newDate);\r\n    }\r\n  };\r\n\r\n  const swipeHandlers = useSwipeable({\r\n    onSwipedRight: handleNavigation.bind(this, -1),\r\n    onSwipedLeft: handleNavigation.bind(this, 1),\r\n  });\r\n\r\n  const handleWheel = (event) => {\r\n    if (event.deltaX !== 0) {\r\n      handleNavigation(Math.sign(event.deltaX));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"Calendar\" onWheel={handleWheel} {...swipeHandlers}>\r\n      <ReactCalendar\r\n        value={parseIndiaDate(date)}\r\n        tileDisabled={isDateDisabled}\r\n        {...{minDate, maxDate, activeStartDate, view}}\r\n        onActiveStartDateChange={handleNavigationButton}\r\n        onViewChange={handleViewButton}\r\n        minDetail=\"year\"\r\n        showFixedNumberOfWeeks\r\n        onChange={handleCalendarClick}\r\n        prevLabel={\r\n          <div>\r\n            <ChevronLeft size={18} />\r\n          </div>\r\n        }\r\n        nextLabel={\r\n          <div>\r\n            <ChevronRight size={18} />\r\n          </div>\r\n        }\r\n        prev2Label={\r\n          <div>\r\n            <ChevronsLeft size={18} />\r\n          </div>\r\n        }\r\n        next2Label={\r\n          <div>\r\n            <ChevronsRight size={18} />\r\n          </div>\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst isEqual = (prevProps, currProps) => {\r\n  if (!equal(currProps.date, prevProps.date)) {\r\n    return false;\r\n  } else if (!equal(currProps.dates, prevProps.dates)) {\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nexport default memo(Calendar, isEqual);\r\n"],"sourceRoot":""}