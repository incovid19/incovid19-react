{"version":3,"sources":["components/Tooltip.js","components/StateMetaCard.js","../node_modules/react-feather/dist/icons/compass.js","components/StateMeta.js"],"names":["Tooltip","children","message","hold","childProps","handleClick","useCallback","e","stopPropagation","className","content","dangerouslySetInnerHTML","__html","trim","split","map","text","join","arrow","animation","touch","onClick","StateMetaCard","title","statistic","total","formula","date","description","t","useTranslation","size","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","Compass","forwardRef","_ref","ref","_ref$color","color","_ref$size","rest","React","createElement","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","cx","cy","r","points","propTypes","PropTypes","string","oneOfType","number","displayName","Fraction","numerator","denominator","StateMeta","stateCode","data","timeseries","confirmedPerLakh","getStatistic","normalizedByPopulationPer","testPerLakh","totalConfirmedPerLakh","activePercent","recoveryPercent","deathPercent","pastDates","filter","getIndiaDateYesterdayISO","lastDate","prevWeekDate","formatISO","subDays","parseIndiaDate","tprWeek","movingAverage","formatNumber","meta","population","href","STATE_NAMES","formatDate","tested","formatLastUpdated","isEqual","prevProps","currProps","memo"],"mappings":"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","file":"static/js/39.9874b516.chunk.js","sourcesContent":["import Tippy from '@tippyjs/react';\r\nimport {useCallback} from 'react';\r\n\r\nimport 'tippy.js/dist/tippy.css';\r\nimport 'tippy.js/animations/shift-away.css';\r\n\r\nfunction Tooltip({children, message, hold = false, childProps = {}}) {\r\n  const handleClick = useCallback((e) => e.stopPropagation(), []);\r\n\r\n  return (\r\n    <Tippy\r\n      className=\"Tooltip\"\r\n      content={\r\n        typeof message === 'string' ? (\r\n          <p\r\n            className=\"message\"\r\n            dangerouslySetInnerHTML={{\r\n              __html: message\r\n                .trim()\r\n                .split('\\n')\r\n                .map((text) => `<div>${text}</div>`)\r\n                .join(''),\r\n            }}\r\n          ></p>\r\n        ) : (\r\n          message\r\n        )\r\n      }\r\n      arrow={false}\r\n      animation=\"shift-away\"\r\n      touch={hold ? ['hold', 300] : true}\r\n    >\r\n      <div onClick={handleClick} {...childProps}>\r\n        {children}\r\n      </div>\r\n    </Tippy>\r\n  );\r\n}\r\n\r\nexport default Tooltip;\r\n","import Tooltip from './Tooltip';\r\n\r\nimport {InfoIcon} from '@primer/octicons-react';\r\nimport {useTranslation} from 'react-i18next';\r\n\r\nfunction StateMetaCard({\r\n  title,\r\n  statistic,\r\n  total,\r\n  formula,\r\n  date,\r\n  description,\r\n  className,\r\n}) {\r\n  const {t} = useTranslation();\r\n\r\n  return (\r\n    <div className={`meta-item ${className}`}>\r\n      <div className=\"meta-item-top\">\r\n        <h3>{title}</h3>\r\n        <Tooltip message={formula}>\r\n          <InfoIcon size={16} />\r\n        </Tooltip>\r\n      </div>\r\n      <h1>{statistic}</h1>\r\n      <h5>{date}</h5>\r\n      {total && <h5>{`${t('India has')} ${total} ${t('CPL')}`}</h5>}\r\n      <p>{description}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StateMetaCard;\r\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar Compass = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"circle\", {\n    cx: \"12\",\n    cy: \"12\",\n    r: \"10\"\n  }), /*#__PURE__*/React.createElement(\"polygon\", {\n    points: \"16.24 7.76 14.12 14.12 7.76 16.24 9.88 9.88 16.24 7.76\"\n  }));\n});\nCompass.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nCompass.displayName = 'Compass';\nexport default Compass;","import StateMetaCard from './StateMetaCard';\r\n\r\nimport {STATE_NAMES} from '../constants';\r\nimport {\r\n  formatDate,\r\n  formatNumber,\r\n  formatLastUpdated,\r\n  getStatistic,\r\n  getIndiaDateYesterdayISO,\r\n  parseIndiaDate,\r\n} from '../utils/commonFunctions';\r\n\r\nimport {formatISO, subDays} from 'date-fns';\r\nimport {memo} from 'react';\r\nimport {Compass} from 'react-feather';\r\nimport {useTranslation} from 'react-i18next';\r\n\r\nfunction Fraction({numerator, denominator}) {\r\n  return (\r\n    <div className=\"frac\">\r\n      <span>{numerator}</span>\r\n      <span className=\"bottom\">{denominator}</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction StateMeta({stateCode, data, timeseries}) {\r\n  const {t} = useTranslation();\r\n\r\n  const confirmedPerLakh = getStatistic(data[stateCode], 'total', 'confirmed', {\r\n    normalizedByPopulationPer: 'lakh',\r\n  });\r\n  const testPerLakh = getStatistic(data[stateCode], 'total', 'tested', {\r\n    normalizedByPopulationPer: 'lakh',\r\n  });\r\n  const totalConfirmedPerLakh = getStatistic(data['TT'], 'total', 'confirmed', {\r\n    normalizedByPopulationPer: 'lakh',\r\n  });\r\n\r\n  const activePercent = getStatistic(data[stateCode], 'total', 'activeRatio');\r\n  const recoveryPercent = getStatistic(\r\n    data[stateCode],\r\n    'total',\r\n    'recoveryRatio'\r\n  );\r\n  const deathPercent = getStatistic(data[stateCode], 'total', 'cfr');\r\n\r\n  // Show TPR for week preceeding last updated date\r\n  const pastDates = Object.keys(timeseries || {}).filter(\r\n    (date) => date <= getIndiaDateYesterdayISO()\r\n  );\r\n  const lastDate = pastDates[pastDates.length - 1];\r\n  const prevWeekDate = formatISO(subDays(parseIndiaDate(lastDate), 6));\r\n\r\n  const tprWeek = getStatistic(timeseries?.[lastDate], 'delta', 'tpr', {\r\n    movingAverage: true,\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <div className=\"StateMeta population\">\r\n        <div className=\"meta-item population\">\r\n          <h3>{t('Population')}</h3>\r\n          <h1>{formatNumber(data[stateCode]?.meta?.population)}</h1>\r\n        </div>\r\n        <div className=\"alert\">\r\n          <Compass />\r\n          <div className=\"alert-right\">\r\n            {t('Based on 2019 population projection by NCP')}\r\n            <a\r\n              href=\"https://nhm.gov.in/New_Updates_2018/Report_Population_Projection_2019.pdf\"\r\n              target=\"_noblank\"\r\n            >\r\n              report\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"StateMeta\">\r\n        <StateMetaCard\r\n          className=\"confirmed\"\r\n          title={t('Confirmed Per Lakh')}\r\n          statistic={formatNumber(confirmedPerLakh)}\r\n          total={formatNumber(totalConfirmedPerLakh)}\r\n          formula={\r\n            <>\r\n              {`${1e5} x `}\r\n              <Fraction\r\n                numerator={t('Total confirmed cases')}\r\n                denominator={t('Total population')}\r\n              />\r\n            </>\r\n          }\r\n          description={`\r\n            ~${formatNumber(confirmedPerLakh, 'long')} ${t(\r\n            'out of every lakh people in'\r\n          )} ${STATE_NAMES[stateCode]} ${t(\r\n            'have tested positive for the virus.'\r\n          )}\r\n            `}\r\n        />\r\n\r\n        <StateMetaCard\r\n          className=\"active\"\r\n          title={t('Active Ratio')}\r\n          statistic={`${formatNumber(activePercent, '%')}`}\r\n          formula={\r\n            <>\r\n              {'100 x '}\r\n              <Fraction\r\n                numerator={t('Total active cases right now')}\r\n                denominator={t('Total confirmed cases')}\r\n              />\r\n            </>\r\n          }\r\n          description={\r\n            activePercent > 0\r\n              ? `${t('For every 100 confirmed cases')}, ~${formatNumber(\r\n                  activePercent,\r\n                  'long'\r\n                )} ${t('are currently infected.')}`\r\n              : t('Currently, there are no active cases in this state.')\r\n          }\r\n        />\r\n\r\n        <StateMetaCard\r\n          className=\"recovery\"\r\n          title={t('Recovery Ratio')}\r\n          statistic={`${formatNumber(recoveryPercent, '%')}`}\r\n          formula={\r\n            <>\r\n              {'100 x '}\r\n              <Fraction\r\n                numerator={t('Total recovered cases')}\r\n                denominator={t('Total confirmed cases')}\r\n              />\r\n            </>\r\n          }\r\n          description={\r\n            recoveryPercent > 0\r\n              ? `${t('For every 100 confirmed cases')}, ~${formatNumber(\r\n                  recoveryPercent,\r\n                  'long'\r\n                )} ${t('have recovered from the virus.')}`\r\n              : t('Unfortunately, there are no recoveries in this state yet.')\r\n          }\r\n        />\r\n\r\n        <StateMetaCard\r\n          className=\"mortality\"\r\n          title={t('Case Fatality Ratio')}\r\n          statistic={`${formatNumber(deathPercent, '%')}`}\r\n          formula={\r\n            <>\r\n              {'100 x '}\r\n              <Fraction\r\n                numerator={t('Total deaths')}\r\n                denominator={t('Total confirmed cases')}\r\n              />\r\n            </>\r\n          }\r\n          description={\r\n            deathPercent > 0\r\n              ? `${t('For every 100 confirmed cases')}, ~${formatNumber(\r\n                  deathPercent,\r\n                  'long'\r\n                )} ${t('have unfortunately passed away from the virus.')}`\r\n              : t(\r\n                  'Fortunately, no one has passed away from the virus in this state.'\r\n                )\r\n          }\r\n        />\r\n\r\n        <StateMetaCard\r\n          className=\"tpr\"\r\n          title={t('Test Positivity Ratio')}\r\n          statistic={tprWeek > 0 ? `${formatNumber(tprWeek, '%')}` : '-'}\r\n          formula={\r\n            <>\r\n              {'100 x '}\r\n              <Fraction\r\n                numerator={t('Confirmed cases last week')}\r\n                denominator={t('Samples tested last week')}\r\n              />\r\n            </>\r\n          }\r\n          date={`${formatDate(prevWeekDate, 'dd MMM')} - ${formatDate(\r\n            lastDate,\r\n            'dd MMM'\r\n          )}`}\r\n          description={\r\n            tprWeek > 0\r\n              ? `${t('In the last one week,')} ${formatNumber(tprWeek, '%')}\r\n              ${t('of samples tested came back positive.')}`\r\n              : t('No tested sample came back positive in last one week.')\r\n          }\r\n        />\r\n\r\n        <StateMetaCard\r\n          className=\"tpl\"\r\n          title={t('Tests Per Lakh')}\r\n          statistic={`${formatNumber(testPerLakh)}`}\r\n          formula={\r\n            <>\r\n              {`${1e5} x `}\r\n              <Fraction\r\n                numerator={t('Total samples tested')}\r\n                denominator={t('Total population')}\r\n              />\r\n            </>\r\n          }\r\n          date={\r\n            testPerLakh && data[stateCode]?.meta?.tested?.date\r\n              ? `${t('As of')} ${formatLastUpdated(\r\n                  data[stateCode].meta.tested.date\r\n                )} ${t('ago')}`\r\n              : ''\r\n          }\r\n          description={\r\n            testPerLakh > 0\r\n              ? `${t('For every lakh people in')} ${STATE_NAMES[stateCode]},\r\n                ~${formatNumber(testPerLakh, 'long')} ${t(\r\n                  'samples were tested.'\r\n                )}`\r\n              : t('No tests have been conducted in this state yet.')\r\n          }\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nconst isEqual = (prevProps, currProps) => {\r\n  if (currProps.timeseries && !prevProps.timeseries) {\r\n    return false;\r\n  } else if (prevProps.stateCode !== currProps.stateCode) {\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nexport default memo(StateMeta, isEqual);\r\n"],"sourceRoot":""}